module ABC where
import Prelude hiding(Num)
import Data.List
-- Consider the following grammar definition, where A, B, and C are non-terminal symbols, and 1 and 0 are terminal symbols.

-- A ::= 0 A 0
--    |  1 B 1
data A = ZeroAZero A
       | OneBOne B
       deriving(Eq,Show)

data B = BBC B B C
       | Zero
       deriving(Eq,Show)

data C = CCC C C C
       | One
       deriving(Eq,Show)
data ABC = AA A
         | BB B
         | CC C



printP:: ABC -> String
printP (AA a) = prettyPrint(a)
printP (BB b) = prettyPrintB(b)
printP (CC c) = prettyPrintC(c)

prettyPrint:: A -> String
prettyPrint (ZeroAZero a) = "0" ++ prettyPrint(a) ++ "0"
prettyPrint (OneBOne b) = "1" ++ prettyPrintB(b) ++ "1"

prettyPrintB:: B -> String
prettyPrintB (BBC b1 b2 c) = prettyPrintB(b1) ++ prettyPrintB(b2) ++ prettyPrintC(c)
prettyPrintB Zero = "0"

prettyPrintC:: C -> String
prettyPrintC (CCC c1 c2 c3) = prettyPrintC(c1) ++ prettyPrintC(c2) ++ prettyPrintC(c3)
prettyPrintC One = "1"
-- B ::= B B C
--    |  0

-- C ::= C C C
--    |  1
-- 1. Determine whether each string can be generated by the above grammar. If the string can be generated, determine which non-terminal (A, B, or C) you must start with in order to generate it. Write either A, B, or C if the string can be generated, or write "no" if it cannot be generated.

-- a. 101
-- A -> B - > A
-- 1 -- 0 -- 1

a = printP( AA (OneBOne Zero))


-- b. 00111
-- B -> B -> C -> C -> C
-- 0 -- 0 -- 1 -- 1 -- 1
b = printP( BB (BBC Zero Zero (CCC One One One)))


-- c. 0011100
-- No

-- d. 0100110
-- A -> A -> B -> B -> C
-- 0 -- 1 -- 0 -- 0 -- 1 -- 1 -- 0

d = printP( AA (ZeroAZero (OneBOne (BBC Zero Zero One))) )

-- e. 11111
-- C -> C -> C -> C -> C -> C
-- 1 -- 1 -- 1 -- 1 -- 1 -- 1

e = printP( CC ( CCC One One (CCC One One One) ))


-- f. 111111
-- No

-- g. 0010111
-- B -> B -> C -> B -> C -> C -> C 
-- 0 -- 0 -- 1 -- 0 -- 1 -- 1 -- 1
g = printP ( BB ( BBC ( BBC Zero Zero One ) Zero (CCC One One One) ) )

-- h. 0000
-- No

-- i. 0000111
-- B -> B -> B -> B -> C -> C -> C
-- 0 -- 0 -- 0 -- 0 -- 1 -- 1 -- 1

i = printP ( BB ( BBC Zero (BBC Zero (BBC Zero Zero One) One) One) ) 

-- j. 0011101
-- B -> B -> C -> C -> C -> C -> B -> C
-- 0 -- 0 -- 1 -- 1 -- 1 -- 1 -- 0 -- C

j  =printP ( BB ( BBC (BBC Zero Zero (CCC One One One)) Zero One) ) 


